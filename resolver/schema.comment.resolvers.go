package resolver

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.22

import (
	"context"
	"fmt"

	"github.com/muhadyan/blog-graphql-api/auth"
	"github.com/muhadyan/blog-graphql-api/graph/model"
	"github.com/muhadyan/blog-graphql-api/validation"
)

// CreateComment is the resolver for the createComment field.
func (r *mutationResolver) CreateComment(ctx context.Context, data model.CreateCommentRequest) (*model.CreateCommentResponse, error) {
	user := auth.FromContext(ctx)
	if !user.Authorize() {
		return nil, errUnauthorized
	}

	err := validation.ValidateCreateComment(data)
	if err != nil {
		err = fmt.Errorf(err.Error())
		return nil, err
	}

	return r.commentService.Create(ctx, data, user.GetUserID())
}

// ApproveComment is the resolver for the approveComment field.
func (r *mutationResolver) ApproveComment(ctx context.Context, data model.ApproveCommentRequest) (*model.ApproveCommentResponse, error) {
	user := auth.FromContext(ctx)
	if !user.Authorize() {
		return nil, errUnauthorized
	}

	err := validation.ValidateApproveComment(data)
	if err != nil {
		err = fmt.Errorf(err.Error())
		return nil, err
	}

	return r.commentService.Approve(ctx, data, user.GetUserID())
}

// GetComments is the resolver for the getComments field.
func (r *queryResolver) GetComments(ctx context.Context, request model.GetCommentsRequest) (*model.GetCommentsResult, error) {
	user := auth.FromContext(ctx)
	if !user.Authorize() {
		return nil, errUnauthorized
	}

	err := validation.ValidateGetComments(request)
	if err != nil {
		err = fmt.Errorf(err.Error())
		return nil, err
	}

	return r.commentService.View(ctx, request)
}

// GetComment is the resolver for the getComment field.
func (r *queryResolver) GetComment(ctx context.Context, request model.GetCommentRequest) (*model.GetCommentResult, error) {
	user := auth.FromContext(ctx)
	if !user.Authorize() {
		return nil, errUnauthorized
	}

	err := validation.ValidateGetComment(request)
	if err != nil {
		err = fmt.Errorf(err.Error())
		return nil, err
	}

	return r.commentService.Get(ctx, request)
}
