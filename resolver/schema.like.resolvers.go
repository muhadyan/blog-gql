package resolver

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.22

import (
	"context"
	"fmt"

	"github.com/muhadyan/blog-graphql-api/auth"
	"github.com/muhadyan/blog-graphql-api/graph/model"
	"github.com/muhadyan/blog-graphql-api/validation"
)

// CreateLike is the resolver for the createLike field.
func (r *mutationResolver) CreateLike(ctx context.Context, data model.CreateLikeRequest) (*model.CreateLikeResponse, error) {
	user := auth.FromContext(ctx)
	if !user.Authorize() {
		return nil, errUnauthorized
	}

	err := validation.ValidateCreateLike(data)
	if err != nil {
		err = fmt.Errorf(err.Error())
		return nil, err
	}

	return r.likeService.Create(ctx, data, user.GetUserID())
}

// GetLikes is the resolver for the getLikes field.
func (r *queryResolver) GetLikes(ctx context.Context, request model.GetLikesRequest) (*model.GetLikesResult, error) {
	user := auth.FromContext(ctx)
	if !user.Authorize() {
		return nil, errUnauthorized
	}

	err := validation.ValidateGetLikes(request)
	if err != nil {
		err = fmt.Errorf(err.Error())
		return nil, err
	}

	return r.likeService.View(ctx, request)
}
